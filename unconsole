#!/usr/bin/python
# vim: noet sw=4 ts=4

import	sys
import	os
import	re
import	argparse

class	UnConsole( object ):

	def	__init__( self, prefix = '.' ):
		self.set_shell_regex()
		self.fileno   = 0
		self.prefix   = prefix
		self.out      = None
		try:
			os.makedirs( self.prefix )
		except:
			pass
		return

	def	set_shell_regex( self, pattern = r'\[root@[^\]]*\]' ):
		self.pattern = pattern
		regex = r'^({0})(.*)?'.format( pattern )
		try:
			self.re_shell = re.compile( regex )
		except Exception, e:
			print >>sys.stderr, 'set_shell_regex( regex="{0}" )'.format(
				regex
			)
			raise e
		return

	def	get_shell_regex( self ):
		return self.pattern

	def	do_name( self, name ):
		if os.path.isfile( name ):
			with open( name ) as f:
				self.process( f )
		elif os.path.isdir( name ):
			for entry in sorted( os.listdir( name ) ):
				self.do_name(
					os.path.join(
						name,
						entry
					)
				)
		else:
			# Silently ignore this file.
			pass
		return

	def	__compute_filename( self, s ):
		cmd = re.sub(
			r'[^-0-9a-zA-Z_]',
			r'_',
			s
		).replace( '__', '_' )
		while cmd.startswith( '_' ):
			cmd = cmd[1:]
		while cmd.endswith( '_' ):
			cmd = cmd[:-1]
		if len(cmd) == 0:
			fn = None
		else:
			self.fileno += 1
			bn = '%03d-%s' % (
				self.fileno,
				cmd
			)
			fn = os.path.join(
				self.prefix if self.prefix else '.',
				bn
			)
		return fn

	def	__print( self, s ):
		if self.out:
			print >>self.out, s
		return

	def	__change_output( self, base ):
		if self.out:
			self.out.close()
		fn = self.__compute_filename( base )
		if fn:
			self.out = open( fn, 'w' )
		else:
			self.out = None
		return

	def	process( self, f = sys.stdin ):
		for line in f:
			line = line.rstrip()
			mo = self.re_shell.search( line )
			if mo:
				fn = self.__change_output( mo.group(2) )
			self.__print( line )
		return

	def	report( self ):
		pass

def	main():
	p = argparse.ArgumentParser(
		prog = os.path.splitext(
			os.path.basename( sys.argv[0] )
		)[0],
		description = 'Explode multiple console commands into files',
		# formatter_class = argparse.ArgumentDefaultsHelpFormatter,
	)
	p.add_argument(
		'-o',
		'--prefix',
		metavar = 'DIR',
		dest    = 'prefix',
		default = None,
		help    = 'send output to DIR instead of pwd(1)'
	)
	p.add_argument(
		'-p',
		'--prompt',
		metavar = 'RE',
		dest = 'shell_regex',
		help = 'identify shell prompts via regex RE'
	)
	p.add_argument(
		'files',
		metavar = 'FILE',
		nargs   = '*',
		help    = 'process files instead of stdin'
	)
	args = p.parse_args()
	uc = UnConsole(
		prefix = args.prefix,
	)
	if args.shell_regex:
		self.set_shell_regex( args.shell_regex )
	if len(args.files) == 0:
		uc.process()
	else:
		for fn in args.files:
			uc.do_name( fn )
	exit( 0 )

if __name__ == '__main__':
	main()
	# NOT REACHED
	exit( 666 )
